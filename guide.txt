前端规范
==========

HTML:
----------

**基本规范**

1. doctype 声明使用 html5:

		<!doctype html>

2. 标签以及属性名使用小写;

3. 对于以下 html 标签可以不结尾:

		<img>, <col>, <base>, <link>, <meta>
 
4. 标签自定义属性使用 data-property="" 的形式来写, 如果自定义属性特别多, 可以考虑使用标准 json 的方式去写: data-json='{"a":"a", "b":"b"}'; ( 注: 不要使用诸如 a:a, b:b 这种方式来写, 因为对于 boolean 或者 数组, 对象来说, 很难去解析, 所以, 这里以标准的 json 方式来说写, 避免解析纠纷 ) ( [Why][w3-custom-data] ) 

5. 对于 JS 钩子, 以 J_TheHump 的驼峰形式来命名;

6. 对于普通 class 或者 id 命名, 统一使用小写字母, 第一个字符必须为字母, 例如: class="sns-box";

7. 不要在浮动元素之间插入任何内容, 包括注释, script 标签, style 标签等;( 在 ie6 下会对浮动元素造成影响 );

**标签使用**

1. `<base>` 标签必须放在 `<head>` 内 (注: 否则在某些浏览器下可能会失效);

2. 每个页面最多使用一个 `<h1>` 标签;

3. `<strong>` 标签用于强调重要性, `<em>` 标签用于表示内容的着重点;( [Why?][strong&em] )

4. `<i>` 标签用来显示 icon;




CSS:
----------

**基本规范**

1. 样式文件中不要出现大写的标签定义, 不要对 JS 钩子进行样式定义; 

2. 避免出现 .a.b 之类的定义, 如果做 hack 使用请注明; ( ie6 不支持此定义 )

3. 稀奇古怪的 hack 请加注释; 

4. 避免使用 !important , 如果必须请加注释; 

5. 缩进以4个空格为单位; 

6. 每条规则为一行, 左大括号跟最后一条, 空一格, 例: 

		.box,
		.content .box {
			color:red;
			font-size:12px;
		}

7. 样式使用竖排, 不要使用横排以及 n 级缩进等;

8. 对于使用 position:relative; 的样式, 请注明使用原因; ( 此样式在 ie6 下经常出现各种问题, 请尽量避免使用 )

9. 对于所有 hack 请放到每个样式定义的最后边;

10. class selector 层级尽量控制在 5 层以内;

**属性使用**

1. border: 以 width, style, color 的顺序书写, width 单位使用 px, 例如:

		border: 1px solid #000;
		border-top: 1px solide #000;
		border-top-color: red;
		border: 0;

   ( 注: 请避免使用 border:none 代替 border:0 [Why?][css-border])

2. background: 以 color, image, repeat, position 的顺序来书写, url 省略引号, 例如:

		background:#003 url(http://www.taobao.com/loading.png) no-repeat 0 0;
		background-color:red;




JavaScript:
----------

**基本格式**

1. 缩进以 4 个空格为基本单位;

2. 三元操作符不要涉及大段的复杂的代码, 如果可以请改为 if else; 

3. 需要前后加空格的运算符包括: 

		 =、==、===、!=、!==、>、<、<=、>= 、? :、-、+、+=、-=、/、*、%、&&、&、||、|、{}

	不需要出现空格的包括: 

		;、.、()、[]

	后边带空格的包括: 

		,、if、for、while、do、catch、with、new、非三元表达式中的:

	例如: 

		a += 2 ;
		b = true ? a : 1;

4. 每段函数或者逻辑之间空行; 

5. 奇淫技巧必须注释; 

6. 避免使用全局变量, 如果不能避免则尽量减少数量; 

7. 括号中的参数之间加空格, 例如:  get(x, b, c); 

8. 将每条语句放置在一个单独的代码行中保持可读性, 不要出现 aNum++; anOtherNum++;在同一行, var 也一样; 

9. 避免声明或赋值的嵌套  如 var a=(b=(c+5)+1)+3; 

10. 一定要记住写分号; 

**命名规范**

1. 构造函数的命名使用首字母大写的形式, 通常为名词, 例如: Class; 

2. 函数、方法名按描述过程或描述项的方式（动名词结合. 来命名, 以小写字母开头, 连接词使用混合大小写的驼峰形式, 例如: getAncestorByTagName; 

3. 常量声明, 使用大写字母表示, 分隔单词使用下划线, 例如 var TW_GIRL = '蔡依林';

4. CSS class 名声明, 使用大写字母并添加 CLASS_ 前缀, 例如 var CLASS_BOX  =  'box' ; 

5. 私有变量、方法声明, 以单下划线 _ 开头, 例如: _private; 

6. 布尔值声明使用以 is 开头的驼峰形式, 例如 var isGirl = true; 

7. this 命名为 that; 

8. DOM 节点命名, 使用小写加 El 后缀, 例如: boxEl; 

9. 在循环中, 尽量使用单字符变量名称, 例如: i、j、k、m、n; 

10. 除以上特殊命名外, 都使小写字母来声明, 例如: var box; ;

11. 变量名仅能包含字母、数字、下划线和美元符号, 变量名不能以数字开头; 

12. 避免使用保留字或语言构造命名; 

13. 尽量保持所有名称最短, 但是一定要保证名称具有描述性; 
 
 
**注释**

1. 文件头的注释书写: 
 
		/**
		 * @fileoverview 文件用途以及简要介绍
		 * @require 需要引入的文件名
		 * @author shiran@taobao.com
		 */
 
2. 类的注释: 
 
		/**
		 * 介绍
		 * @class YUI
		 * @param arg1 { String } 参数描述
		 * @param arg2 { Array } 参数描述
		 * @constructor
		 * @extends { goog.Disposable }
		 */
 
3. 方法、函数注释: 
 
		/**
		 * 介绍
		 * @method getData
		 * @param arg1 { String } 参数描述
		 * @return { String } 描述
		 */
 
4. 属性注释: 
 
		/**
		 * 介绍
		 * @type { Number }
		 */
 
5. 行内或者较短注释可以使用 // 或者 /* ... */
 
6. 多行大段描述性注释, 使用 // 来分行书写, 比如: 
 
		//Takes a named string, hex string, array of rgb or rgba values,
		//an object with r, g, b, and a properties, or another `dojo.Color` object
		//and creates a new Color instance to work from.
 
7. @TODO 注释请注明大概完成日期, 不要让此注释常驻; 
 
数据
----------
 
开发返回数据编码约定, 待定。

[strong&em]: http://www.css88.com/archives/644 "em和strong的区别"
[w3-custom-data]: http://dev.w3.org/html5/spec/Overview.html#embedding-custom-non-visible-data-with-the-data-attributes "Embedding custom non-visible data with the data-* attributes"
[css-border]: http://archivist.incutio.com/viewlist/css-discuss/6297 "[css-d] border: 0; vs. border: none;"
