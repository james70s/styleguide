前端规范
==========

Quick Links:
----------

[HTML][q-html], [CSS][q-css], [Javascript][q-js]

<a name="HTML"></a>
HTML:
----------

**基本规范**

1. doctype 声明使用 html5:

		<!doctype html>

2. 标签以及属性名使用小写;

3. 对于以下 html 标签可以不结尾:

		<img>, <col>, <base>, <link>, <meta>
 
4. 标签自定义属性使用 data-property="" 的形式来写, 如果自定义属性特别多, 可以考虑使用标准 json 的方式去写: data-json='{"a":"a", "b":"b"}'; ( 注: 不要使用诸如 a:a, b:b 这种方式来写, 因为对于 boolean 或者 数组, 对象来说, 很难去解析, 所以, 这里以标准的 json 方式来说写, 避免解析纠纷 ) ( [Why][w3-custom-data] ) 

5. 对于 JS 钩子, 以 J_TheHump 的驼峰形式来命名;

6. 对于普通 class 或者 id 命名, 统一使用小写字母, 第一个字符必须为字母, 例如: class="sns-box";

7. 不要在浮动元素之间插入任何内容, 包括注释, script 标签, style 标签等;( 在 ie6 下会对浮动元素造成影响 );

8. css 引用置于头部 `<head>` 标签内;

9. js 引用置于底部 `</body>` 标签前;


**标签使用**

1. `<base>` 标签必须放在 `<head>` 内 (注: 否则在某些浏览器下可能会失效);

2. 每个页面最多使用一个 `<h1>` 标签;

3. `<strong>` 标签用于强调重要性, `<em>` 标签用于表示内容的着重点;( [Why?][strong&em] )

4. `<i>` 标签用来显示图标(icon);

5. `<s>` 标签用来显示阴影(shadow);

6. `<b>` 标签用来显示边框(border);

7. `<iframe>` 标签尽量少用;

**注释规范**

1. 对每一个 html 模块, 使用注释包裹, 并加上模块标识: 

		<!-- tsearch { -->
		<div id="tsearch">
			<form method="post" action="#">
				<!-- ... -->
			</form>
		</div>
		<!-- } -->

   如果需要在模块内添加子模块注释, 使用多个“{}”对包裹以区分层级: 

		<!-- sub-module {{ -->
		<div class="sub-module">
			<!-- ... -->
		</div>
		<!-- }} -->

   对于特意需要留有空行 / 空格, 或特意不需要的地方, 使用注释明确指出

2. 修改别人代码时, 加入修改信息. 至少加入修改者大名和修改时间: 

		<!--@author fahai-->
		<!--@last-modified 2010-12-15 13:21-->


3. ie 条件注释:

		<!--[if IE]>
		<![endif]-->


		<!--[if IE 7]>
		<![endif]-->


		<!--[if lte IE 7]>
		<![endif]-->


		<!--[if !IE]><!-->
		<!--<![endif]-->


<a name="CSS"></a>
CSS:
----------

**基本规范**

1. 样式文件中不要出现大写的标签定义, 不要对 JS 钩子进行样式定义; 

2. 避免出现 .a.b 之类的定义, 如果做 hack 使用请注明; ( ie6 不支持此定义 )

3. 稀奇古怪的 hack 请加注释; 

4. 避免使用 !important , 如果必须请加注释; 

5. 缩进以4个空格为单位; 

6. 每条规则为一行, 左大括号跟最后一条, 空一格, 例: 

		.box,
		.content .box {
			color:red;
			font-size:12px;
		}

7. 样式使用竖排, 不要使用横排以及 n 级缩进等;

8. 对于使用 position:relative; 的样式, 请注明使用原因; ( 此样式在 ie6 下经常出现各种问题, 请尽量避免使用 )

9. 对于所有 hack 请放到每个样式定义的最后边;

10. class selector 层级尽量控制在 5 层以内;

**属性使用**

1. border: 以 width, style, color 的顺序书写, width 单位使用 px, 例如:

		border: 1px solid #000;
		border-top: 1px solide #000;
		border-top-color: red;
		border: 0;

   ( 注: 请避免使用 border:none 代替 border:0 [Why?][css-border])

2. background: 以 color, image, repeat, position 的顺序来书写, url 省略引号, 例如:

		background:#003 url(http://www.taobao.com/loading.png) no-repeat 0 0;
		background-color:red;

3. 在使用 CSS expression 时一定要检测性能, 尽量避免使用;

**注释规范**

1. 文件头注释:

		/**
		 * Style for module header.
		 * @author fahai
		 * @version 1.0.0 build 2010-12-8
		 * @modified shiran 2011-2-18
		 */

2. 对应于 html 模块, 每一个模块使用注释包裹, 并加上模块标识: 

		/* top-banner { */
		.top-header .top-banner {
			width: 100%;
			height: 40px;
		}


		.top-header .top-banner img {
			vertical-align: middle;
		}
		/* } */

3. 神奇代码和鬼才 hack 添加注释: 

		background-color: transparent; /* flexible background gradient */
		font-family: serif; /* text floating bug in ie6 */

<a name="JavaScript"></a>
JavaScript:
----------

**基本格式**

1. 缩进以 4 个空格为基本单位;

2. 三元操作符不要涉及大段的复杂的代码, 如果可以请改为 if else; 

3. 需要前后加空格的运算符包括: 

		 =, ==, ===, !=, !==, >, <, <=, >= , ? :, -, +, +=, -=, /, *, %, &&, &, ||, |, {}

	不需要出现空格的包括: 

		;, ., (), []

	后边带空格的包括: 

		,, if, for, while, do, catch, with, new, 非三元表达式中的:

	例如: 

		a += 2 ;
		b = true ? a : 1;

4. 每段函数或者逻辑之间空行; 

5. 奇淫技巧必须注释; 

6. 避免使用全局变量, 如果不能避免则尽量减少数量; 

7. 括号中的参数之间加空格, 例如:  get(x, b, c); 

8. 将每条语句放置在一个单独的代码行中保持可读性, 不要出现 aNum++; anOtherNum++;在同一行, var 也一样; 

9. 一定要记住写分号; 

**命名规范**

1. 构造函数的命名使用首字母大写的形式, 通常为名词, 例如: Class; 

2. 函数, 方法名按描述过程或描述项的方式（动名词结合. 来命名, 以小写字母开头, 连接词使用混合大小写的驼峰形式, 例如: getAncestorByTagName; 

3. 常量命名, 使用大写字母表示, 分隔单词使用下划线, 例如 var TW_GIRL = '蔡依林';

4. CSS class 名声明, 使用大写字母并添加 CLASS_ 前缀, 例如 var CLASS_BOX  =  'box' ; 

5. 私有变量, 方法声明, 以单下划线 _ 开头, 例如: _private; 

6. 布尔值声明使用以 is 开头的驼峰形式, 例如 var isGirl = true; 

7. this 命名为 that; 

8. DOM 节点命名, 使用小写加 El 后缀, 例如: boxEl; 

9. 在循环中, 尽量使用单字符变量名称, 例如: i, j, k, m, n; 

10. 除以上特殊命名外, 都使小写字母来声明, 例如: var box; ;

11. 变量名仅能包含字母, 数字, 下划线和美元符号, 变量名不能以数字开头; 

12. 避免使用保留字或语言构造命名; 

13. 尽量保持所有名称最短, 但是一定要保证名称具有描述性; 

14. 临时变量命名:

		字符 c, d, e 
		坐标 x, y, z 
		异常 e 
		图形 g 
		对象 o 
		流 in, out 
		字符串 s


**具体规范**

1. var: 尽量在函数头部统一声明, 局部变量声明时不要丢失 var, 避免嵌套声明( var a=(b=(c+5)+1)+3 ). 例如:

		var a = 1, 
			b = 2;

2. 函数声明: 不要在块( {} ) 中使用函数式声明(see ECMA-262, clause 13 and 14):

		if (x) {
		  function foo() {}
		}

   要用变量式声明:

		if (x) {
		  var foo = function() {}
		}

3. 尽量避免将基本类型转换为 object, 例如: var x = new Number(1);

4. 减少闭包的使用;

5. 避免使用 with() {} ;

6. 避免对数组使用 for-in;

7. 创建数组时尽量使用简写, 例如: var a = new Array(x), 如果 x 为数字, 则该数组可能不能达到你的预期, 正确的使用方法为:

		var a = [x];

8. 创建对象时尽量使用简写, 例如:

		var a = {};

9. 在为对象定义 toString() 方法时, 请不要对源对象进行修改;

10. if...else 写法:

		if (something) {
		  // ...
		} else if(something) {
		  // ...
		} else {
		  // ...
		}

11. switch 语句写法:

		switch(condition) {
			case something:
				//...
			break;
			case something:
				//...
			break;
			default:
				//...
		}

12. try ... catch 语句写法:

		try {
			//...
		} catch(e) {};

		try {
			//...
		} catch(e) {
			//...
		} finally {

		}

13. while 语句写法:

		while(condition) {


		}

14. do ... while 语句写法:

		do {
			//...
		} while(condition);


15. 小数组/小对象写法:

		var arr = [1, 2, 3];  // No space after [ or before ].
		var obj = {a: 1, b: 2, c: 3};  // No space after { or before }.

16. 长数组/大对象写法:

		// Object initializer.
		var inset = {
			top: 10,
			right: 20,
			bottom: 15,
			left: 12
		};

		// Array initializer.
		this.rows_ = [
			'"Slartibartfast" <fjordmaster@magrathea.com>',
			'"Zaphod Beeblebrox" <theprez@universe.gov>',
			'"Ford Prefect" <ford@theguide.com>',
			'"Arthur Dent" <has.no.tea@gmail.com>',
			'"Marvin the Paranoid Android" <marv@googlemail.com>',
			'the.mice@magrathea.com'
		];

		// Used in a method call.
		goog.dom.createDom(goog.dom.TagName.DIV, {
			id: 'foo',
			className: 'some-css-class',
			style: 'display:none'
		}, 'Hello, world!');

17. 一般的函数参数尽量写在一行, 对于长参数写法如下:

		// Four-space, wrap at 80.  Works with very long function names, survives
		// renaming without reindenting, low on space.
		goog.foo.bar.doThingThatIsVeryDifficultToExplain = function(
			veryDescriptiveArgumentNumberOne, veryDescriptiveArgumentTwo,
			tableModelEventHandlerProxy, artichokeDescriptorAdapterIterator) {
		  // ...
		};

		// Four-space, one argument per line.  Works with long function names,
		// survives renaming, and emphasizes each argument.
		goog.foo.bar.doThingThatIsVeryDifficultToExplain = function(
			veryDescriptiveArgumentNumberOne,
			veryDescriptiveArgumentTwo,
			tableModelEventHandlerProxy,
			artichokeDescriptorAdapterIterator) {
		  // ...
		};

		// Parenthesis-aligned indentation, wrap at 80.  Visually groups arguments,
		// low on space.
		function foo(veryDescriptiveArgumentNumberOne, veryDescriptiveArgumentTwo,
					 tableModelEventHandlerProxy, artichokeDescriptorAdapterIterator) {
		  // ...
		}

		// Parenthesis-aligned, one argument per line.  Visually groups and
		// emphasizes each individual argument.
		function bar(veryDescriptiveArgumentNumberOne,
					 veryDescriptiveArgumentTwo,
					 tableModelEventHandlerProxy,
					 artichokeDescriptorAdapterIterator) {
		  // ...
		}

   函数参数写法:

		var names = items.map(function(item) {
								return item.name;
							  });

		prefix.something.reallyLongFunctionName('whatever', function(a1, a2) {
		  if (a1.equals(a2)) {
			someOtherLongFunctionName(a1);
		  } else {
			andNowForSomethingCompletelyDifferent(a2.parrot);
		  }
		});

 
**注释**

1. 文件头的注释: 
 
		// Copyright 2009 Google Inc. All Rights Reserved.

		/**
		 * @fileoverview Description of file, its uses and information
		 * about its dependencies.
		 * @author user@google.com (Firstname Lastname)
         * @modified shiran 2011-2-18
		 */
 
2. 类的注释: 
 
		/**
		 * Class making something fun and easy.
		 * @param {string} arg1 An argument that makes this more interesting.
		 * @param {Array.<number>} arg2 List of numbers to be processed.
		 * @constructor
		 * @extends {goog.Disposable}
		 */
		project.MyClass = function(arg1, arg2) {
		  // ...
		};
		goog.inherits(project.MyClass, goog.Disposable);

 
3. 方法, 函数注释: 
 
		/**
		 * Converts text to some completely different text.
		 * @param {string} arg1 An argument that makes this more interesting.
		 * @return {string} Some return value.
		 */
		project.MyClass.prototype.someMethod = function(arg1) {
		  // ...
		};

		/**
		 * Operates on an instance of MyClass and returns something.
		 * @param {project.MyClass} obj Instance of MyClass which leads to a long
		 *     comment that needs to be wrapped to two lines.
		 * @return {boolean} Whether something occured.
		 */
		function PR_someMethod(obj) {
		  // ...
		}

 
4. 属性注释: 
 
		/**
		 * Maximum number of things per pane.
		 * @type {number}
		 */
		project.MyClass.prototype.someProperty = 4;

5. 常量类型注释:

		/** @type {number} */ (x)
		(/** @type {number} */ x)

6. 枚举类型注释:

		/**
		 * Enum for tri-state values.
		 * @enum {number}
		 */
		project.TriState = {
		  TRUE: 1,
		  FALSE: -1,
		  MAYBE: 0
		};

7. 需要换行的注释:

		/**
		 * This is NOT the preferred indentation method.
		 * @param {string} foo This is a param with a description too long to fit in
		 *                     one line.
		 * @return {number} This returns something that has a description too long to
		 *                  fit in one line.
		 */
		project.MyClass.prototype.method = function(foo) {
		  return 5;
		};

8. 例子注释:

		/**
		 * @example
		 * var bleeper = makeBleep(3);
		 * bleeper.flop();
		 */

 
6. 行内或者较短注释可以使用 // 或者 /* ... */
 
7. 多行大段描述性注释, 使用 // 来分行书写, 比如: 
 
		//Takes a named string, hex string, array of rgb or rgba values,
		//an object with r, g, b, and a properties, or another `dojo.Color` object
		//and creates a new Color instance to work from.
 
8. @TODO 注释表示将要做的东西, 请注明大概完成日期, 不要让此注释常驻; 

9. @FIXME 注释表示需要 fix 的地方, 请注明大概完成日期, 不要让此注释常驻; 
 
数据
----------
 
开发返回数据编码约定, 待定. 


参考资料:
----------

* [Google JavaScript Style Guide][gjsg]
* [Code Style][cs]

[strong&em]: http://www.css88.com/archives/644 "em和strong的区别"
[w3-custom-data]: http://dev.w3.org/html5/spec/Overview.html#embedding-custom-non-visible-data-with-the-data-attributes "Embedding custom non-visible data with the data-* attributes"
[css-border]: http://archivist.incutio.com/viewlist/css-discuss/6297 "[css-d] border: 0; vs. border: none;"
[gjsg]: http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml?showone=Nested_functions#Nested_functions 
[cs]: http://www.codestyle.org/
[q-html]: #HTML
[q-css]: #CSS
[q-js]: #JavaScript
